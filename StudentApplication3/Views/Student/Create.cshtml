@model StudentApplication3.Models.Student

@{
    ViewBag.Title = "Create Student";
}

@*<script>

    function validate() {
        if (document.getElementById("txtName").value.length < 3) {
            alert("Name should be greater than 3 character");
            return false;
        }
        return true;
    }
</script>*@




<h2>Create Student</h2>

@using (Html.BeginForm("Create", "Student", FormMethod.Post, new { id = "studentForm" }))
{
<div class="container" style="border: 1px solid black; padding: 20px; box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.5); border-radius: 5px">
    <div class="row">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Name)
            @Html.TextBoxFor(model => model.Name, new { @class = "form-control", id = "txtName" })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            <span id="nameError" class="text-danger"></span>

        </div>


        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Email)
            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", id = "txtEmail" })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="row">


        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.DOB)
            @Html.TextBoxFor(model => model.DOB, new { @class = "form-control", type = "date", id = "dob" })
            <span id="dobError" class="text-danger"></span>
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Age)
            @Html.TextBoxFor(model => model.Age, new { @class = "form-control", type = "number", id = "age", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="row">

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Gender)
            <div>
                <label class="radio-inline">
                    @Html.RadioButtonFor(model => model.Gender, "Male") Male
                </label>
                <label class="radio-inline">
                    @Html.RadioButtonFor(model => model.Gender, "Female") Female
                </label>
                <label class="radio-inline">
                    @Html.RadioButtonFor(model => model.Gender, "Other") Other
                </label>
            </div>
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.Hobbies)
            @Html.TextAreaFor(model => model.Hobbies, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Hobbies, "", new { @class = "text-danger", id = "txtHobbies" })
        </div>

    </div>
    <div class="row">

        <div class="form-group col-sm-6">
            @Html.LabelFor(model => model.CDAC_Center, "CDAC Center")
            @Html.DropDownListFor(model => model.CDAC_Center, (SelectList)ViewBag.list, "Select your Center", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CDAC_Center, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="text-center mt-3 ">
        <button class="btn btn-primary" type="submit">Create</button>

        <a href="@Url.Action("Index")" class="btn btn-secondary">Back to List</a>
    </div>


</div>
   




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    }
<script src="~/Scripts/jquery.validate.min.js"></script>
<script>
        document.getElementById("dob").addEventListener("change", function () {
            var dobInput = document.getElementById("dob").value;
            var dob = new Date(dobInput);
            var today = new Date();
            var errorMessage = document.getElementById("dobError");

            if (dob > today) {
                errorMessage.textContent = "Date of Birth cannot be greater than today.";
                document.getElementById("age").value = "";
            } else {
                errorMessage.textContent = "";
                var age = today.getFullYear() - dob.getFullYear();
                var monthDiff = today.getMonth() - dob.getMonth();
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
                    age--;
                }
                document.getElementById("age").value = age;
            }
        });

       
     $('#studentForm').submit(function (e) {
    e.preventDefault();
    if (!$("#studentForm").valid()) {
        return; // Prevent submission if the form is invalid
    }

    $.ajax({
        url: '@Url.Action("Create", "Student")',
        type: 'POST',
        data: $(this).serialize(),
        success: function (response) {
            if (response.success) {
                alert(response.message);
                window.location.href = '@Url.Action("Index", "Student")';
            } else {
               
            }
        },
        error: function () {
            alert('An error occurred. Please try again.');
        }
    });
});

</script>
    <script>
        $(document).ready(function () {
            $("#studentForm").validate({
                rules: {
                    Name: {
                        required: true,
                        minlength: 3
                    },
                    Email: {
                        required: true,
                        email: true
                    },
                    DOB: {
                        required: true,
                        date: true
                    },
                    Gender: {
                        required: true
                    },
                    center_id: {
                        required: true
                    }
                },
                messages: {
                    Name: {
                        required: "Please enter your name.",
                        minlength: "Name must be at least 3 characters long."
                    },
                    Email: {
                        required: "Please enter your email.",
                        email: "Enter a valid email address."
                    },
                    DOB: {
                        required: "Please select your Date of Birth.",
                        date: "Enter a valid date."
                    },
                    Gender: {
                        required: "Please select your gender."
                    },
                    center_id: {
                        required: "Please select your CDAC Center."
                    }
                }
            });


        });

        // Date of Birth Validation and Age Calculation
        $("#dob").change(function () {
            var dobInput = $("#dob").val();
            var dob = new Date(dobInput);
            var today = new Date();
            var errorMessage = $("#dobError");

            if (dob > today) {
                errorMessage.text("Date of Birth cannot be in the future.");
                $("#age").val("");
            } else {
                errorMessage.text("");
                var age = today.getFullYear() - dob.getFullYear();
                var monthDiff = today.getMonth() - dob.getMonth();
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
                    age--;
                }
                $("#age").val(age);
            }
        });


        document.getElementById("txtName").addEventListener("input", function () {
            const nameInput = this.value;
            const nameError = document.getElementById("nameError");

            const namePattern = /^[A-Za-z\s]+$/; // Only letters and spaces

            if (nameInput.length < 3) {
                nameError.textContent = "Name must be at least 3 characters long.";
            } else if (!namePattern.test(nameInput)) {
                nameError.textContent = "Name can only contain letters and spaces.";
            } else {
                nameError.textContent = "";
            }
        });

        document.getElementById("studentForm").addEventListener("submit", function (e) {
            const nameInput = document.getElementById("txtName").value;
            const nameError = document.getElementById("nameError");

            if (nameInput.length < 3 || !/^[A-Za-z\s]+$/.test(nameInput)) {
                e.preventDefault(); // Prevent form submission
                alert("Please fix the name field errors before submitting.");
            }
        });

      
    </script>



}
